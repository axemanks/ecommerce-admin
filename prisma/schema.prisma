// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model of the store
model Store {
  id     String @id @default(uuid())
  name   String
  userId String
  billboards Billboard[] @relation("StoreToBillboard") // relation to billboards
  categories Category[] @relation("StoreToCategory") // relation to categories
  sizes Size[] @relation("StoreToSize") // relation to size
  colors Color[] @relation("StoreToColor") // relation to colors
  products Product[] @relation("StoreToProduct") // relation to products
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model for bilboards - storeId field in the Billboard model is used to link each Billboard to a Store via the Store's id.
model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id]) // relation to store
  label String
  imageUrl String
  categories Category[] // relation to categories
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId]) // Create Index - Indexes are used to speed up the performance of database operations. By creating an index on the storeId field, any operations that involve searching for billboards by storeId will be faster.
}

// Model for category
model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id]) // relation to store
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id]) // relation to billboard
  products Product[] @relation("CategoryToProduct") // relation to products
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

// Size
model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id]) // relation to store
  product Product[]  // relation to product
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

// Colors
model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id]) // relation to store
  product Product[] // relation to product
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

// Product
model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id]) // relation to store
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id]) // relation to category
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String 
  size Size @relation(fields: [sizeId], references: [id]) // relation to size
  colorId String
  color Color @relation(fields: [colorId], references: [id]) // relation to color
  images Image[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

// Model Image - product can have multiple images
model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Cascade allows to delte product even if images are still there
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}